#emulator for canyoucrackit.co.uk
#
#pk
#gdtr.wordpress.com
OP_JMP  = 0
OP_MOVR = 1
OP_MOVM = 2
OP_ADD  = 3
OP_XOR  = 4
OP_CMP  = 5
OP_JMPE = 6
OP_HLT  = 7

PC = "pc"
R0, R1, R2, R3 = "r0", "r1", "r2", "r3"
CS, DS = "cs", "ds"
FL = "fl"

REGS = [R0, R1, R2, R3, CS, DS]

CPU = { 
        PC: 0x00, 

        R0: 0x00,
        R1: 0x00,
        R2: 0x00,
        R3: 0x00,

        CS: 0x00,
        DS: 0x10,

        FL: 0x00
      }

#firmware: [0xd2ab1f05, 0xda13f110]
  
MEM = [
    0x31, 0x04, 0x33, 0xaa, 0x40, 0x02, 0x80, 0x03, 0x52, 0x00, 0x72, 0x01, 0x73, 0x01, 0xb2, 0x50,
    0x30, 0x14, 0xc0, 0x01, 0x80, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    0x98, 0xab, 0xd9, 0xa1, 0x9f, 0xa7, 0x83, 0x83, 0xf2, 0xb1, 0x34, 0xb6, 0xe4, 0xb7, 0xca, 0xb8,
    0xc9, 0xb8, 0x0e, 0xbd, 0x7d, 0x0f, 0xc0, 0xf1, 0xd9, 0x03, 0xc5, 0x3a, 0xc6, 0xc7, 0xc8, 0xc9,
    0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9,
    0xda, 0xdb, 0xa9, 0xcd, 0xdf, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
    0x26, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9,
    0x7d, 0x1f, 0x15, 0x60, 0x4d, 0x4d, 0x52, 0x7d, 0x0e, 0x27, 0x6d, 0x10, 0x6d, 0x5a, 0x06, 0x56,
    0x47, 0x14, 0x42, 0x0e, 0xb6, 0xb2, 0xb2, 0xe6, 0xeb, 0xb4, 0x83, 0x8e, 0xd7, 0xe5, 0xd4, 0xd9,
    0xc3, 0xf0, 0x80, 0x95, 0xf1, 0x82, 0x82, 0x9a, 0xbd, 0x95, 0xa4, 0x8d, 0x9a, 0x2b, 0x30, 0x69,
    0x4a, 0x69, 0x65, 0x55, 0x1c, 0x7b, 0x69, 0x1c, 0x6e, 0x04, 0x74, 0x35, 0x21, 0x26, 0x2f, 0x60,
    0x03, 0x4e, 0x37, 0x1e, 0x33, 0x54, 0x39, 0xe6, 0xba, 0xb4, 0xa2, 0xad, 0xa4, 0xc5, 0x95, 0xc8,
    0xc1, 0xe4, 0x8a, 0xec, 0xe7, 0x92, 0x8b, 0xe8, 0x81, 0xf0, 0xad, 0x98, 0xa4, 0xd0, 0xc0, 0x8d,
    0xac, 0x22, 0x52, 0x65, 0x7e, 0x27, 0x2b, 0x5a, 0x12, 0x61, 0x0a, 0x01, 0x7a, 0x6b, 0x1d, 0x67,
    0x75, 0x70, 0x6c, 0x1b, 0x11, 0x25, 0x25, 0x70, 0x7f, 0x7e, 0x67, 0x63, 0x30, 0x3c, 0x6d, 0x6a,
    0x01, 0x51, 0x59, 0x5f, 0x56, 0x13, 0x10, 0x43, 0x19, 0x18, 0xe5, 0xe0, 0xbe, 0xbf, 0xbd, 0xe9,
    0xf0, 0xf1, 0xf9, 0xfa, 0xab, 0x8f, 0xc1, 0xdf, 0xcf, 0x8d, 0xf8, 0xe7, 0xe2, 0xe9, 0x93, 0x8e,
    0xec, 0xf5, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    0x37, 0x7a, 0x07, 0x11, 0x1f, 0x1d, 0x68, 0x25, 0x32, 0x77, 0x1e, 0x62, 0x23, 0x5b, 0x47, 0x55,
    0x53, 0x30, 0x11, 0x42, 0xf6, 0xf1, 0xb1, 0xe6, 0xc3, 0xcc, 0xf8, 0xc5, 0xe4, 0xcc, 0xc0, 0xd3,
    0x85, 0xfd, 0x9a, 0xe3, 0xe6, 0x81, 0xb5, 0xbb, 0xd7, 0xcd, 0x87, 0xa3, 0xd3, 0x6b, 0x36, 0x6f,
    0x6f, 0x66, 0x55, 0x30, 0x16, 0x45, 0x5e, 0x09, 0x74, 0x5c, 0x3f, 0x29, 0x2b, 0x66, 0x3d, 0x0d,
    0x02, 0x30, 0x28, 0x35, 0x15, 0x09, 0x15, 0xdd, 0xec, 0xb8, 0xe2, 0xfb, 0xd8, 0xcb, 0xd8, 0xd1,
    0x8b, 0xd5, 0x82, 0xd9, 0x9a, 0xf1, 0x92, 0xab, 0xe8, 0xa6, 0xd6, 0xd0, 0x8c, 0xaa, 0xd2, 0x94,
    0xcf, 0x45, 0x46, 0x67, 0x20, 0x7d, 0x44, 0x14, 0x6b, 0x45, 0x6d, 0x54, 0x03, 0x17, 0x60, 0x62,
    0x55, 0x5a, 0x4a, 0x66, 0x61, 0x11, 0x57, 0x68, 0x75, 0x05, 0x62, 0x36, 0x7d, 0x02, 0x10, 0x4b,
    0x08, 0x22, 0x42, 0x32, 0xba, 0xe2, 0xb9, 0xe2, 0xd6, 0xb9, 0xff, 0xc3, 0xe9, 0x8a, 0x8f, 0xc1,
    0x8f, 0xe1, 0xb8, 0xa4, 0x96, 0xf1, 0x8f, 0x81, 0xb1, 0x8d, 0x89, 0xcc, 0xd4, 0x78, 0x76, 0x61,
    0x72, 0x3e, 0x37, 0x23, 0x56, 0x73, 0x71, 0x79, 0x63, 0x7c, 0x08, 0x11, 0x20, 0x69, 0x7a, 0x14,
    0x68, 0x05, 0x21, 0x1e, 0x32, 0x27, 0x59, 0xb7, 0xcf, 0xab, 0xdd, 0xd5, 0xcc, 0x97, 0x93, 0xf2,
    0xe7, 0xc0, 0xeb, 0xff, 0xe9, 0xa3, 0xbf, 0xa1, 0xab, 0x8b, 0xbb, 0x9e, 0x9e, 0x8c, 0xa0, 0xc1,
    0x9b, 0x5a, 0x2f, 0x2f, 0x4e, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  ]

def get_opcode(b1):
    return ((b1 & 0xE0)>>5);
    
def get_mod(b1):
    return ((b1 & 0x10)>>4);

def get_opnd1(b1):
    return b1 & 0xF;
    
def addr2off(segment, offset):
    return ((segment<<4)+offset);

def get_reg_by_idx(cpu, idx):
    assert(0 <= idx < len(REGS))

    reg = REGS[idx]
    return cpu[reg]

def set_reg_by_idx(cpu, idx, val):
    assert(0 <= idx < len(REGS))
    assert(0 <= val <= 0xFF)

    reg = REGS[idx]
    cpu[reg] = val

def interpret_op2(cpu, mod, op2):
    if mod == 0:
        v = get_reg_by_idx(cpu, op2)
    else:
        v = op2
    return v

def arith(cpu, mod, op1, op2, f):
    v1 = get_reg_by_idx(cpu, op1)
    v2 = interpret_op2(cpu, mod, op2)
    val = f(v1, v2)%0xFF
    set_reg_by_idx(cpu, op1, val)

def off2addr(off):
    pc = off & 0xF
    cs = off >> 4
    return (cs, pc)

def handle_jmp(cpu, mod, op1, op2):
    v1 = get_reg_by_idx(cpu, op1)
    if mod == 0:
        cs = cpu[CS]
        pc = cpu[PC]
        off = addr2off(cs, pc)
        base_cs = off/0x100
        base_cs *= 0x10
        #(cs, pc) = off2addr(v1)
        (cs, pc) = (base_cs, v1)
    else:
        v2 = op2
        (cs, pc) = (v2, v1)
    
    cpu[CS] = cs
    cpu[PC] = pc

def dis_reg_by_idx(reg): 
    return REGS[reg]

def dis_interpret_op2(mod, op2):
    if mod == 0:
        di = dis_reg_by_idx(op2)
    else:
        di = "%02x"%op2
    return di

def jmp_size(mod): mod+1

def disasm_jmp_addr(mod, op1, op2):
    r1 = dis_reg_by_idx(op1)
    if mod == 0:
        return r1
    else:
        r2 = "%02x"%op2
        return "%s:%s"%(r2,r1)

def disasm(cpu, mem, offset, opcode, mod, op1, op2):

    isize = 2

    if opcode == OP_JMP:
        addr = disasm_jmp_addr(mod, op1, op2)
        di = "jmp %s"%addr

        isize = jmp_size(mod)

    elif opcode == OP_MOVR:
        d1 = dis_reg_by_idx(op1)
        d2 = dis_interpret_op2(mod, op2)
        di = "movr %s, %s"%(d1, d2)

    elif opcode == OP_MOVM:
        d1 = dis_reg_by_idx(op1)
        d2 = dis_reg_by_idx(op2)
        if mod == 0:
            d1 = d1
            d2 = "[ds:%s]"%d2
        else:
            d1 = "[ds:%s]"%d1
            d2 = d2
        
        di = "movm %s, %s"%(d1, d2)

    elif opcode == OP_ADD:
        d1 = dis_reg_by_idx(op1)
        d2 = dis_interpret_op2(mod, op2)
        di = "add %s, %s"%(d1, d2)

    elif opcode == OP_XOR:
        d1 = dis_reg_by_idx(op1)
        d2 = dis_interpret_op2(mod, op2)
        di = "xor %s, %s"%(d1, d2)

    elif opcode == OP_CMP:
        d1 = dis_reg_by_idx(op1)
        d2 = dis_interpret_op2(mod, op2)
        di = "cmp %s, %s"%(d1, d2)

    elif opcode == OP_JMPE:
        addr = disasm_jmp_addr(mod, op1, op2)
        di = "jmpe %s"%addr
        isize = jmp_size(mod)

    elif opcode == OP_HLT:
        isize = 1
        di = "hlt"

    else:
        assert(False)
    
    b1 = (opcode<<5)+(mod<<4)+op1
    b2 = op2
    bytes = "%02x"%b1
    if isize == 2:
        bytes += "%02x"%b2

    cs = cpu[CS]
    pc = cpu[PC]
    off = addr2off(cs,pc)
    o = "%04x %02x:%02x\t%s\t%s"%(off, cs, pc, bytes, di)

    return o

def handle_opcode(cpu, mem, offset, opcode, mod, op1, op2):

    isize = 2

    if opcode == OP_JMP:
        handle_jmp(cpu, mod, op1, op2)
        return True

    elif opcode == OP_MOVR:
        v2 = interpret_op2(cpu, mod, op2)
        set_reg_by_idx(cpu, op1, v2)

    elif opcode == OP_MOVM:
        ds = cpu[DS]
        if mod == 0:
            v2 = get_reg_by_idx(cpu, op2)
            ds_off = addr2off(ds, v2)
            ds_off %= len(mem)
            val = mem[ds_off]
            set_reg_by_idx(cpu, op1, val)
        else:
            v1 = get_reg_by_idx(cpu, op1)
            ds_off = addr2off(ds, v1)
            ds_off %= len(mem)
            val = get_reg_by_idx(cpu, op2)
            mem[ds_off] = val 

    elif opcode == OP_ADD:
        f = lambda x,y: (x+y)%0xFF
        arith(cpu, mod, op1, op2, f)

    elif opcode == OP_XOR:
        f = lambda x,y: (x^y)%0xFF
        arith(cpu, mod, op1, op2, f)

    elif opcode == OP_CMP:
        v1 = get_reg_by_idx(cpu, op1) 
        v2 = interpret_op2(cpu, mod, op2)

        if v1 == v2:
            cpu[FL] = 0
        elif v1 < v2:
            cpu[FL] = 0xFF
        else:
            cpu[FL] = 1

    elif opcode == OP_JMPE:
        fl = cpu[FL]
        if fl == 0:
            handle_jmp(cpu, mod, op1, op2)
            return True

        if mod == 0:
            isize = 1

    elif opcode == OP_HLT:
        return False    #halt

    else:
        assert(False)
    
    offset += isize
    cs, pc = off2addr(offset)
    cpu[CS] = cs
    cpu[PC] = pc

    return True #continue

def emu(cpu, mem):
    
    running = True
    while running:
        off = addr2off(cpu[CS], cpu[PC])
        b1 = mem[off]
        b2 = mem[off+1]
        opcode = get_opcode(b1)
        mod = get_mod(b1)
        op1 = get_opnd1(b1)
        op2 = b2

        print off
        di = disasm(cpu, mem, off, opcode, mod, op1, op2)
        print cpu
        print di
        running = handle_opcode(cpu, mem, off, opcode, mod, op1, op2)

        cs = cpu[CS]
        pc = cpu[PC]

        if cs == 0x10 and pc == 0x1b:
            break

def dump_mem(mem, fn):
    print mem
    f = open(fn, "wb")
    mem = map(lambda x: chr(x), mem)
    s = "".join(mem)
    f.write(s)
    f.close()

if __name__=="__main__":

    emu(CPU, MEM)

    dump_mem(MEM, "mem.bin")

